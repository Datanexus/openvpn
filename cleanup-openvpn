#!/usr/bin/env ansible-playbook
# (c) 2016 DataNexus Inc.  All Rights Reserved. 
#
# remove openvpn instances
---
- hosts: localhost
  vars_files:
    - "{{ configuration }}"
  gather_facts: true  
  tasks:
    # for at least the initial release the jumphost will host the vpn
    - name: OPENVPN OVERLAY Azure | restricting to jumphost
      set_fact: application=jumphost
      
    - block:
      - name: gathering {{ region }} running instances
        ec2_instance_facts:
          region: "{{ region }}"
          filters:
            instance-state-name: running
            "tag:Tenant": "{{ tenant }}"
            "tag:Project": "{{ project }}"
            "tag:Domain": "{{ domain }}"
            "tag:Application": "{{ application }}"
            "tag:Cluster": "{{ cluster | default ('a') }}"
            "tag:Dataflow": "{{ dataflow | default ('none') }}"
        register: instance_facts

      - name: terminating instances in {{ region }}
        ec2:
          state: absent
          region: "{{ region }}"
          instance_ids: "{{ item }}"
          wait: true
        with_items: "{{ instance_facts.instances | selectattr('state', 'equalto', 'running') | map(attribute='id') | list }}"
        when:
          - instance_facts.instances | length > 0
    
      - name: gathering {{ region }} available volumes
        ec2_vol_facts:
          region: "{{ region }}"
          filters:
            status: available
        register: volume_facts

      - name: terminating volumes in {{ region }}
        ec2_vol:
          state: absent
          region: "{{ region }}"
          id: "{{ item }}"
        with_items: "{{ volume_facts.volumes | selectattr('status', 'equalto', 'available') | map(attribute='id') | list }}"
        when:
          - volume_facts.volumes|length > 0

      - name: gathering {{ region }} available interfaces
        ec2_eni_facts:
          region: "{{ region }}"
          filters:
            status: available
        register: eni_facts    

      - name: terminating interfaces in {{ region }}
        ec2_eni:
          state: absent
          region: "{{ region }}"
          eni_id: "{{ item }}"
        with_items: "{{ eni_facts.interfaces | selectattr('status', 'equalto', 'available') | map(attribute='id') | list }}"
        when:
          - eni_facts.interfaces|length > 0
    
      - name: removing {{ application }} key
        ec2_key:
          state: absent
          region: "{{ region }}"      
          name: "{{ region }}-{{ application }}"
    
      - name: retrieving VPC ID for {{ network }} in {{ region }}
        ec2_vpc_net_facts:
          region: "{{ region }}"
          # This filter must map exactly to what we created in the e2_vpc module
          filters:
            cidr_block: "{{ cidr_block }}"
        register: vpc_facts

      - name: removing jumphost security groups
        ec2_group:
          name: "{{ item }}"
          vpc_id: "{{ (vpc_facts.vpcs | selectattr('state', 'equalto', 'available') | map(attribute='id') | list).0 }}"
          region: "{{ region }}"
          state: absent
        with_items:
          - jumphost_ssh
          - jumphost_open
          - demo_ssh
      when: cloud == 'aws'
      
    - block:
      - include_role:
          name: azure
          tasks_from: discover-resourcegroup

      - name: OPENVPN CLEANUP | removing {{ application }} VM in {{ specified_resourcegroup.name }}
        azure_rm_virtualmachine:
          resource_group: "{{ specified_resourcegroup.name }}"
          name: "{{ item }}"
          state: absent
          remove_on_absent:
              - network_interfaces
              - virtual_storage
        with_items:
          - "{{ project }}-{{ application }}"
          
      - name: OPENVPN CLEANUP | removal if we haven't booted a machine
        azure_rm_networkinterface:
          resource_group: "{{ specified_resourcegroup.name }}"
          name: "{{ item }}"
          state: absent
        with_items:
          - "{{ project }}_{{ application }}_internal"
          - "{{ project }}_{{ application }}_external"

      - name: OPENVPN CLEANUP | deleting public ips
        azure_rm_publicipaddress:
          resource_group: "{{ specified_resourcegroup.name }}"
          name: "{{ item }}"
          state: absent
        with_items:
          - "{{ project }}_{{ application }}_internal_ip"
          - "{{ project }}_{{ application }}_external_ip"

      - name: OPENVPN OVERLAY | deleting all security groups
        azure_rm_securitygroup:
          resource_group: "{{ specified_resourcegroup.name }}"
          name: "{{ item }}"
          state: absent
        with_items:
          - "dnsg_{{ project }}_ssh_private_external"
          - "{{ project }}_{{ application }}_external"
          - "{{ project }}_{{ application }}_internal"
      when: cloud == 'azure'
