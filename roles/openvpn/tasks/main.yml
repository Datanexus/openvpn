# (c) Copyright 2016 DataNexus Inc.  All Rights Reserved.
#
# install openvpn
---    
- import_tasks: interface-facts.yml

- name: OPENVPN OVERLAY | checking for {{ application }} package existence
  stat: path="/tmp/openvpn-{{ openvpn_version }}.tar.gz"
  register: existing_package
  
- block:
  - name: OPENVPN OVERLAY | installing prequisite packages
    become: true
    package:
      name: "{{ item }}"
      state: present
    with_items:
      - rpm-build
      - openssl-devel
      - lzo-devel
      - pam-devel
      # gross - we may eventually want to just host a pre-build RPM because I don't like having compilers on the jumphost
      - gcc

  - name: OPENVPN OVERLAY | downloading openvpn-{{ openvpn_version }}.tar.gz
    get_url:
      url: "https://swupdate.openvpn.org/community/releases/openvpn-{{ openvpn_version }}.tar.gz"
      dest: "/tmp/openvpn-{{ openvpn_version }}.tar.gz"
      mode: 0600

  - name: OPENVPN OVERLAY | building openvpn-{{ openvpn_version }}.tar.gz...this may take some time
    command: "/usr/bin/rpmbuild -tb /tmp/openvpn-{{ openvpn_version }}.tar.gz"
  
  when: not existing_package.stat.exists
  
- name: OPENVPN OVERLAY | installing openvpn package
  become: true
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - ./rpmbuild/RPMS/x86_64/openvpn-{{ openvpn_version }}-1.x86_64.rpm


#
# - block:
#   - name: POSTGRESQL OVERLAY | creating default PostgreSQL profile
#     template:
#       src: postgres.sh.j2
#       dest: "{{ postgresql_home_dir }}/.pgsql_profile"
#       owner: "{{ postgresql_user }}"
#       group: "{{ postgresql_user }}"
#       mode: 0644
#     become: yes
#
#   - name: POSTGRESQL OVERLAY | applying postgresql customizations
#     blockinfile:
#       name: "/etc/systemd/system/postgresql-{{ postgresql_major_version }}.{{ postgresql_minor_version }}.service"
#       mode: 0644
#       create: yes
#       block: |
#         .include /lib/systemd/system/postgresql-{{ postgresql_major_version }}.{{ postgresql_minor_version }}.service
#         [Service]
#         Environment=PGDATA={{ postgresql_data_dir }}
#
#   - name: POSTGRESQL OVERLAY | checking if {{ application }} database is initialized
#     stat:
#       path: "{{ postgresql_data_dir }}/PG_VERSION"
#     register: pgdata_dir_version
#
#   - name: initializing {{ postgresql_data_dir }}
#     command: "{{ postgresql_bin_path }}/postgresql{{ postgresql_major_version }}{{ postgresql_minor_version }}-setup initdb"
#     when: not pgdata_dir_version.stat.exists
#
#   - name: POSTGRESQL OVERLAY | listening on {{ postgresql_interface_ipv4 }}
#     lineinfile:
#       dest: "{{ postgresql_config_path }}/postgresql.conf"
#       regexp: "^#?listen_addresses"
#       backrefs: yes
#       line: "listen_addresses = '{{ item }}'\t# what IP address(es) to listen on;"
#     with_items: "{{ postgresql_interface_ipv4 }}"
#     notify: restart postgresql
#
#   - name: POSTGRESQL OVERLAY | configuring global settings
#     lineinfile:
#       dest: "{{ postgresql_config_path }}/postgresql.conf"
#       regexp: "^#?{{ item.option }}.+$"
#       line: "{{ item.option }} = '{{ item.value }}'"
#       state: "{{ item.state | default('present') }}"
#     with_items: "{{ postgresql_global_config_options }}"
#     notify: restart postgresql
#
#   - name: POSTGRESQL OVERLAY | ensuring {{ application }} unix socket dirs exist
#     file:
#       path: "{{ item }}"
#       state: directory
#       owner: "{{ postgresql_user }}"
#       group: "{{ postgresql_group }}"
#       mode: 02775
#     with_items: "{{ postgresql_unix_socket_directories }}"
#
#   - name: POSTGRESQL OVERLAY | ensuring SE Linux pre-requisite packages are installed
#     become: true
#     package:
#       name: "{{ item }}"
#       state: present
#     when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
#     with_items:
#       - policycoreutils-python
#
#   - name: POSTGRESQL OVERLAY | updating SE Linux enforcing mode
#     sefcontext:
#       target: "{{ postgresql_data_dir }}(/.*)?"
#       setype: postgresql_db_t
#       state: present
#       reload: true
#     when: ansible_selinux.status == "enabled"
#
#   # sefcontent does not restore the context, so we need another step
#   - name: POSTGRESQL OVERLAY | restoring SE Linux security context
#     command: /sbin/restorecon -R {{ postgresql_data_dir }}
#     when: ansible_selinux.status == "enabled"
#
#   - name: POSTGRESQL OVERLAY | setting listener to trust the data subnet
#     lineinfile:
#      dest: "{{ postgresql_config_path }}/pg_hba.conf"
#      insertafter: "^host    all             all             127.0.0.1/32            ident"
#      line: "host    all             {{ postgresql_user }}        {{ postgresql_broadcast_interface_ipv4 }}/24          trust"
#     notify: restart postgresql
#
#   - name: POSTGRESQL OVERLAY | ensuring {{ application }} is started and enabled on boot
#     systemd: "name={{ postgresql_daemon }} state=started enabled=True"
#   become: true
